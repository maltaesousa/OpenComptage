* Deadlines
  - 15.08 Neuchâtel sends info about tables and a dump of the actual postgres db
  - 24.08 We send the database model
  - 06.09 Neuchâtel validate the database model
  - 05.10 13:00 meeting (perhaps online) to present the prototype
  - 14.11 13:00 meeting 
* Practices
** TDD
*** Functional tests
    Funtional tests that cover all functionalities. Are run by the CI tool on
    each push.
    Test workflow
    - run a docker with qgis
      - install the plugin into qgis
    - run a docker with pg
      - create the database
      - import the test data
    - run the functional tests into qgis
*** Unit test
    That cover all code functions.
*** CI
    Tests on each push, release on each tag
* Notes
** Develop the plugin with TDD. 
** Is it possible to use SQLAlchemy into the plugin without installing external tools?
   I think yes, because is a simply pip install. For Postgis there is geoalchemy
   https://geoalchemy-2.readthedocs.io/en/latest/
*** Create ER diagram from sqlalchemy
    https://stackoverflow.com/questions/44981986/sqlalchemy-er-diagram-in-python-3
** Use Denis's CI integration for QGIS 
   Deploy automatically a new QGIS plugin to download for each new tag
** Use the strategy design pattern
   To be able to use different algorithms to create configuration files and use
   different algorithms to import data from different sources.
** Abstract from the db manager
   So I can use different kind approaches (SQLalchemy, pure SQL, mocked db, ...)
* Tasks [1/8]
  - [X] Create plugin skeleton
  - [ ] Add requirements
  - [ ] Prepare data model description  
  - [ ] Modify db model with meeting points
  - [ ] Prepare translation table
  - [ ] Create test docker
  - [ ] Integrate plugin_ci
  - [ ] Separate README.org on multiple files
    - README.org with purpose, info on how to install and test, and links to the
      other documents
    - requirements.org with the requirements process
    - 

Your QGIS plugin directory is located at:
  /home/mario/.local/share/QGIS/QGIS3/profiles/default/python/plugins 
What's Next
In your plugin directory, compile the resources file using pyrcc5 (simply run make if you have automake or use pb_tool) 
Test the generated sources using make test (or run tests from your IDE) 
Copy the entire directory containing your new plugin to the QGIS plugin directory (see Notes below) 
Test the plugin by enabling it in the QGIS plugin manager 
Customize it by editing the implementation file Comptages.py 
Create your own custom icon, replacing the default icon.png 
Modify your user interface by opening Comptages_dialog_base.ui in Qt Designer 
Notes: 
You can use the Makefile to compile and deploy when you make changes. This requires GNU make (gmake). The Makefile is ready to use, however you will have to edit it to add addional Python source files, dialogs, and translations. 
You can also use pb_tool to compile and deploy your plugin. Tweak the pb_tool.cfg file included with your plugin as you add files. Install pb_tool using pip or easy_install. See http://loc8.cc/pb_tool for more information. 
For information on writing PyQGIS code, see http://loc8.cc/pyqgis_resources for a list of resources. 
©2011-2018 GeoApt LLC - geoapt.com 
